<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on agus sarwono - programming for dummies</title>
    <link>https://agussarwono.com/article/</link>
    <description>Recent content in Articles on agus sarwono - programming for dummies</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Mar 2024 12:56:36 +0700</lastBuildDate><atom:link href="https://agussarwono.com/article/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simple blog api using python flask and markdown</title>
      <link>https://agussarwono.com/article/simple-blog-api-using-python-flask-and-markdown/</link>
      <pubDate>Tue, 12 Mar 2024 12:56:36 +0700</pubDate>
      
      <guid>https://agussarwono.com/article/simple-blog-api-using-python-flask-and-markdown/</guid>
      <description>I have a blog generated by Hugo, and I require access to its content through a REST API. Due to Hugo&amp;rsquo;s nature as a static site generator and not a server, it lacks a native feature for exposing a REST API.
Upon further investigation, I found that I can develop a Python script using the Flask framework to create a JSON-compatible REST API for accessing my blog&amp;rsquo;s content. While it may seem unconventional to use Flask instead of generating a JSON file directly in Hugo, I view this as an opportunity to enhance my proficiency in Python.</description>
    </item>
    
    <item>
      <title>Simplified Guide Setting Up a Local Domain with Caddy Server</title>
      <link>https://agussarwono.com/article/setting-up-a-local-domain-with-caddy-server/</link>
      <pubDate>Mon, 12 Feb 2024 09:37:36 +0000</pubDate>
      
      <guid>https://agussarwono.com/article/setting-up-a-local-domain-with-caddy-server/</guid>
      <description>Introduction In the realm of web development and local testing environments, creating custom local domain can streamline the devepment process. this guide walks you the steps to set up a new local domain using Caddy Server
Prerequisites CaddyServer: make sure you have caddy installed on your system, if you haven&amp;rsquo;t installed it yet, You can download and install it from the official Caddy website
Text Editor (vscode,vim, etc&amp;hellip;), have a text editor of your choice.</description>
    </item>
    
    <item>
      <title>Menikmati segelas air hangat</title>
      <link>https://agussarwono.com/article/segelas-air-hangat/</link>
      <pubDate>Tue, 30 Jan 2024 09:37:36 +0000</pubDate>
      
      <guid>https://agussarwono.com/article/segelas-air-hangat/</guid>
      <description>Salah satu kebiasaan yang saya lakukan di pagi hari adalah minum air hangat, terutama jika ditambahkan sedikit rasa manis. Selain dapat menyegarkan tubuh dan pikiran, minum air di pagi hari sangat baik untuk kesehatan, terutama jika yang diminum adalah air putih.
Setiap harinya, kita sebaiknya mengonsumsi sekitar 2 liter air untuk memenuhi kebutuhan cairan dalam tubuh.
Dulu, setiap kali saya ingin meminum air hangat, saya menggunakan dispenser air dengan fitur pemanasan otomatis.</description>
    </item>
    
    <item>
      <title>Prepend your commit with JIRA ticket number</title>
      <link>https://agussarwono.com/article/add-ticket-to-your-commit/</link>
      <pubDate>Thu, 18 Mar 2021 09:37:36 +0000</pubDate>
      
      <guid>https://agussarwono.com/article/add-ticket-to-your-commit/</guid>
      <description>asdsad</description>
    </item>
    
    <item>
      <title>Cast an interface/struct in golang</title>
      <link>https://agussarwono.com/article/cast-interface-struct-golang/</link>
      <pubDate>Wed, 25 Oct 2017 15:45:42 +0700</pubDate>
      
      <guid>https://agussarwono.com/article/cast-interface-struct-golang/</guid>
      <description>type casting interface in golang can be useful when you build a modular app using golang
says package main import ( &amp;#34;fmt&amp;#34; ) type Bird interface { Fly() } type Parrot struct { Bird Name string } func (p *Parrot) Fly() { fmt.Println(&amp;#34;a Parrot name &amp;#34; + p.Name + &amp;#34; flying&amp;#34;) } type Dove struct { Bird Name string } func (p *Dove) Fly() { fmt.Println(&amp;#34;a Dove name &amp;#34; + p.</description>
    </item>
    
  </channel>
</rss>
