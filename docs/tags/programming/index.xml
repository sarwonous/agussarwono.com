<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on agus sarwono - programming for dummies</title>
    <link>https://agussarwono.com/tags/programming/</link>
    <description>Recent content in programming on agus sarwono - programming for dummies</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Mar 2024 12:56:36 +0700</lastBuildDate><atom:link href="https://agussarwono.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simple blog api using python flask and markdown</title>
      <link>https://agussarwono.com/article/simple-blog-api-using-python-flask-and-markdown/</link>
      <pubDate>Tue, 12 Mar 2024 12:56:36 +0700</pubDate>
      
      <guid>https://agussarwono.com/article/simple-blog-api-using-python-flask-and-markdown/</guid>
      <description>I have a blog generated by Hugo, and I require access to its content through a REST API. Due to Hugo&amp;rsquo;s nature as a static site generator and not a server, it lacks a native feature for exposing a REST API.
Upon further investigation, I found that I can develop a Python script using the Flask framework to create a JSON-compatible REST API for accessing my blog&amp;rsquo;s content. While it may seem unconventional to use Flask instead of generating a JSON file directly in Hugo, I view this as an opportunity to enhance my proficiency in Python.</description>
    </item>
    
    <item>
      <title>Cast an interface/struct in golang</title>
      <link>https://agussarwono.com/article/cast-interface-struct-golang/</link>
      <pubDate>Wed, 25 Oct 2017 15:45:42 +0700</pubDate>
      
      <guid>https://agussarwono.com/article/cast-interface-struct-golang/</guid>
      <description>type casting interface in golang can be useful when you build a modular app using golang
says package main import ( &amp;#34;fmt&amp;#34; ) type Bird interface { Fly() } type Parrot struct { Bird Name string } func (p *Parrot) Fly() { fmt.Println(&amp;#34;a Parrot name &amp;#34; + p.Name + &amp;#34; flying&amp;#34;) } type Dove struct { Bird Name string } func (p *Dove) Fly() { fmt.Println(&amp;#34;a Dove name &amp;#34; + p.</description>
    </item>
    
  </channel>
</rss>
